Metadata-Version: 2.1
Name: task
Version: 2019.6.11
Summary: UNKNOWN
Home-page: https://github.com/looking-for-a-job/task.py
License: UNKNOWN
Description: <!--
        https://pypi.org/project/readme-generator/
        https://pypi.org/project/python-readme-generator/
        https://pypi.org/project/django-readme-generator/
        -->
        
        [![](https://img.shields.io/pypi/pyversions/task.svg?longCache=True)](https://pypi.org/project/task/)
        
        #### Installation
        ```bash
        $ [sudo] pip install task
        ```
        
        #### Benefits
        +   **no manual edit**. only classes and scripts!
        +   **dynamic tasks state**
        +   **standalone django models usage**
        
        #### How it works
        ```bash
        site-packages/task_<name>.py
        ```
        
        `task_<name>.py`
        ```python
        from task.classes import Task
        
        class Name(Task):
            def todo(self):
                return True if ... else False
        ```
        
        #### Config
        `TASK_SETTINGS_MODULE` or `DJANGO_SETTINGS_MODULE`, default is `task.settings`
        
        `task.settings` `DATABASE` variables:
        
        variable|environment value|default value
        -|-|-
        `ENGINE`|`TASK_ENGINE`|`django.db.backends.postgresql_psycopg2`
        `NAME`|`TASK_DBNAME`|`tasks`
        `USER`|`TASK_USERNAME`|`$USER`
        `PASSWORD`|`TASK_PASSWORD`|`''`
        `HOST`|`TASK_HOST`|`localhost`
        `PORT`|`TASK_PORT`|`5432`
        
        or use custom `TASK_SETTINGS_MODULE`/`DJANGO_SETTINGS_MODULE` module:
        
        ```bash
        export TASK_SETTINGS_MODULE="task_settings" # site-packages/task_settings.py
        ```
        
        #### Models
        model|`__doc__`
        -|-
        `task.models.Category` |fields: `name`, `disabled`, `parent` (optional). methods: `getclass()`
        `task.models.Task` |fields: `module_name`, `class_name`, `name`, `slug`, `todo`, `disabled`, `completed_at`, `reminded_at`, `category` (optional). methods: `getclass()`. properties: `elapsed`
        
        #### Classes
        class|`__doc__`
        -|-
        `task.classes.Task` |base class for a Task model. attrs: `name`, `category`, `description`, `disabled`. methods: `complete()`, `update()`. properties: `completed_at`. not implemented: `todo()`, ...
        
        #### Functions
        function|`__doc__`
        -|-
        `task.getmodules()` |return a list of `task_*` module objects
        `task.classes.scan()` |scan site-packages and sync Task classes
        `task.classes.update()` |update all tasks
        
        #### Executable modules
        usage|`__doc__`
        -|-
        `python -m task.complete value` |complete task by id/name/class_name
        `python -m task.scan` |scan site-packages and sync task classes
        `python -m task.update` |create/update all tasks
        
        #### Examples
        ```python
        import task.setup
        from task.classes import Task
        
        class Stand_up(Task):
            def todo(self):
                return not self.elapsed or self.elapsed >= 30*60
        ```
        
        ```bash
        $ python -m task.scan
        $ python -m task.update
        ```
        
        #### What's Next?
        create services (cron, launchd, etc) with notifications, Desktop widgets, applications, web interface
        
        <p align="center">
            <a href="https://pypi.org/project/django-readme-generator/">django-readme-generator</a>
        </p>
Keywords: task todo
Platform: UNKNOWN
Description-Content-Type: text/markdown
